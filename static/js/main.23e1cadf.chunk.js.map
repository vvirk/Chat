{"version":3,"sources":["components/Preloader/images/Spinner.svg","components/ChatList/Message/images/avatar.png","components/Login/Login.js","actions/index.js","actions/actionTypes.js","containers/LoginContainer.js","components/Preloader/Preloader.js","components/Header/Header.js","utils/getNumberOfUsers.js","utils/getLastMessageTime.js","containers/HeaderContainer.js","components/ChatList/Message/Message.js","components/ChatList/ChatList.js","containers/ChatListContainer.js","components/MessageInput/MessageInput.js","containers/MessageInputContainer.js","components/Footer/Footer.js","components/Chat/Chat.js","containers/ChatContainer.js","routes.js","App.js","reducers/reducer.js","serviceWorker.js","index.js"],"names":["module","exports","Login","props","useState","userName","setUserName","addUserName","className","type","onChange","e","target","value","placeholder","to","onClick","toggleIsFetching","isFetching","mapDispatchToProps","LoginContainer","connect","state","Preloader","src","Spinner","alt","Header","messages","users","usersList","Set","map","user","add","size","getNumberOfUsers","length","lastMesage","created_at","getLastMessageTime","HeaderContainer","Message","classWrap","classMessage","createdTime","classAvatar","avatar","name","message","classLikeWrap","ChatList","key","id","ChatListContainer","newMessage","MessageInput","setMessage","addNewMessage","onKeyUp","keyCode","MessageInputContainer","Footer","href","Chat","this","getMessages","React","Component","dispatch","a","fetch","response","json","responseBody","console","log","ChatContainer","withRouter","MainRouter","path","exact","component","App","initialState","reducer","action","moment","format","Boolean","window","location","hostname","match","configureStore","createStore","applyMiddleware","thunk","store","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oFAAAA,EAAOC,QAAU,IAA0B,qC,mBCA3CD,EAAOC,QAAU,IAA0B,oC,mKC2B5BC,EAxBM,SAAAC,GAAU,IAAD,EACIC,mBAAS,IADb,mBACrBC,EADqB,KACXC,EADW,KAEpBC,EAAgBJ,EAAhBI,YACR,OACE,yBAAKC,UAAU,cACb,yBAAKA,UAAU,eACb,2BACEC,KAAK,OACLD,UAAU,gCACVE,SAAU,SAAAC,GAAC,OAAIL,EAAYK,EAAEC,OAAOC,QACpCC,YAAY,4BAEd,kBAAC,IAAD,CACEC,GAAIV,EAAW,QAAU,IACzBG,UAAU,8BACVQ,QAAS,kBAAIT,EAAYF,KAH3B,Y,yBCRKY,EAAmB,SAAAC,GAAU,MAAK,CAC7CT,KCPgC,qBDQhCS,eEHIC,EAAqB,CACvBZ,YFqBuB,SAAAF,GAAQ,MAAK,CACtCI,KC1B2B,gBD2B3BJ,cEhBae,EALeC,YALN,SAAAC,GAAK,MAAK,IAOhCH,EAF4BE,CAG5BnB,G,yDCCaqB,EARU,kBACvB,yBAAKf,UAAU,kBACb,yBAAKA,UAAU,mBACb,yBAAKgB,IAAKC,IAASC,IAAI,eCoBdC,EAxBO,SAAAxB,GAAU,IACtByB,EAAazB,EAAbyB,SACR,OACE,4BAAQpB,UAAU,UAChB,yBAAKA,UAAU,WACb,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,eAAf,WAGA,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,8BCbK,SAAAqB,GAC9B,IAAMC,EAAY,IAAIC,IACpB,GAAIF,EAEF,OADAA,EAAMG,IAAI,SAAAC,GAAI,OAAIH,EAAUI,IAAID,EAAKA,QAC9BH,EAAUK,KDURC,CAAiBR,GADpB,cAEGA,EAASS,OAFZ,aAIA,yBAAK7B,UAAU,iCAAf,iBEjBsB,SAAAoB,GAChC,IAAMU,EAAaV,EAASS,OAAS,EACnC,GAAIT,EAASU,GACX,OAAOV,EAASU,GAAYC,WFeLC,CAAmBZ,SGPjCa,EALgBpB,YAJP,SAAAC,GAAK,MAAK,CAChCM,SAAUN,EAAMM,WAES,GACIP,CAG7BM,GCkBae,EA1BQ,SAAAvC,GACrB,OACE,wBAAIK,UAAWL,EAAMwC,WACnB,yBAAKnC,UAAWL,EAAMyC,cACpB,yBAAKpC,UAAU,gBACZL,EAAM0C,aAET,yBAAKrC,UAAU,iBACb,yBAAKA,UAAU,gBACb,yBAAKA,UAAWL,EAAM2C,aACpB,yBAAKtB,IAAKrB,EAAM4C,OAAQrB,IAAI,YAE9B,yBAAKlB,UAAU,gBACb,wBAAIA,UAAU,iBAAiBL,EAAM6C,MACrC,yBAAKxC,UAAU,gBAAgBL,EAAM8C,WAGzC,yBAAKzC,UAAWL,EAAM+C,eACpB,4BAAQ1C,UAAU,gBAAlB,e,iBCgBG2C,EA/BS,SAAAhD,GAAU,IACxByB,EAAazB,EAAbyB,SACR,OACE,6BAASpB,UAAU,aACjB,yBAAKA,UAAU,WACXoB,EACE,wBAAIpB,UAAU,iBACXoB,EAASI,IAAI,SAAAiB,GAAO,OACnB,kBAAC,EAAD,CACEN,UAAYM,EAAQhB,OAAS9B,EAAME,SAC/B,+BAAiC,eACrCuC,aAAeK,EAAQhB,OAAS9B,EAAME,SAClC,qBAAuB,UAC3B6C,cAAgBD,EAAQhB,OAAS9B,EAAME,SACnC,eAAiB,oBACrByC,YAAcG,EAAQhB,OAAS9B,EAAME,SACjC,eAAiB,SACrB+C,IAAKH,EAAQI,GACbN,OAAQE,EAAQF,OACZE,EAAQF,OAASA,IACrBF,YAAaI,EAAQV,WACrBS,KAAMC,EAAQhB,KACdgB,QAASA,EAAQA,aAGf,QCfLK,EALkBjC,YAPT,SAAAC,GAAK,MAAK,CAChCM,SAAUN,EAAMM,SAChB2B,WAAYjC,EAAMiC,WAClBlD,SAAUiB,EAAMjB,WAES,GAEMgB,CAG/B8B,GCgBaK,EA3Ba,SAAArD,GAAU,IAAD,EACLC,mBAAS,IADJ,mBAC5B6C,EAD4B,KACnBQ,EADmB,KAE3BC,EAAkBvD,EAAlBuD,cACR,OACE,yBAAKlD,UAAU,sBACb,yBAAKA,UAAU,yBACb,2BACEA,UAAU,gBACVC,KAAK,OACLC,SAAU,SAAAC,GAAC,OAAI8C,EAAW9C,EAAEC,OAAOC,QACnC8C,QAAS,SAAAhD,GAAC,OAAmB,KAAdA,EAAEiD,SAAkBX,EAC/BS,EAAcT,IAAYQ,EAAW,IAAM,MAC/C5C,MAAOoC,EACPnC,YAAY,sBAEd,4BACEN,UAAU,oBACVQ,QAAS,kBAAKiC,EACVS,EAAcT,IAAYQ,EAAW,IAAM,OAHjD,WCVFtC,EAAqB,CACzBuC,cZe2B,SAAAT,GAAO,MAAK,CACvCxC,KCtB6B,kBDuB7BwC,aYVaY,EALsBxC,YANb,SAAAC,GAAK,MAAK,CAChCM,SAAUN,EAAMM,WAOhBT,EAFmCE,CAGnCmC,GCKaM,EAhBO,WACpB,OACE,4BAAQtD,UAAU,UAChB,yBAAKA,UAAU,WACb,yBAAKA,UAAU,gBACb,yBAAKA,UAAU,cACb,uBAAGA,UAAU,kBAAkBuD,KAAK,KAApC,QACA,uBAAGvD,UAAU,kBAAkBuD,KAAK,KAApC,SACA,uBAAGvD,UAAU,kBAAkBuD,KAAK,KAApC,eAEF,yBAAKvD,UAAU,aAAf,wBCeKwD,EApBf,4LAEIC,KAAK9D,MAAM+D,gBAFf,+BAIY,IACAhD,EAAe+C,KAAK9D,MAApBe,WACR,OACE,yBAAKV,UAAU,aACZU,EAAa,kBAAC,EAAD,MAAgB,KAC9B,0BAAMV,UAAU,QACd,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,OAEF,kBAAC,EAAD,WAdR,GAA0B2D,IAAMC,WCK1BjD,EAAqB,CACzB+C,YfDyB,wDAAM,WAAMG,GAAN,iBAAAC,EAAA,qEAE7BD,EAASpD,GAAiB,IACd,4CAHiB,SAINsD,MADX,6CAHiB,cAIvBC,EAJuB,gBAKFA,EAASC,OALP,OAKvBC,EALuB,OAM7BL,EAhBoC,CACtC5D,KCH0B,eDI1BmB,SAcuB8C,IACrBL,EAASpD,GAAiB,IAPG,kDAQpB0D,QAAQC,IAAR,MARoB,wDAAN,uDeEzB3D,oBAOa4D,EALcC,YAAWzD,YARhB,SAAAC,GAAK,MAAK,CAChCJ,WAAYI,EAAMJ,WAClBU,SAAUN,EAAMM,WAQhBT,EAFsCE,CAGtC2C,ICPae,EAPW,kBACxB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAW9D,IACjC,kBAAC,IAAD,CAAO4D,KAAK,QAAQC,OAAK,EAACC,UAAWL,M,MCI1BM,MARf,WACE,OACE,yBAAK3E,UAAU,OACb,kBAAC,EAAD,Q,2lBCJC,IAAM4E,EAAe,CAC1BxD,UAAU,EACVV,YAAY,EACZqC,WAAY,GACZlD,UAAU,GAECgF,EAAU,WAAmC,IAAlC/D,EAAiC,uDAAzB8D,EAAcE,EAAW,uCACvD,OAAQA,EAAO7E,MACb,IjBRyB,gBiBSvB,OAAO,EAAP,GAAYa,EAAZ,CAAmBjB,SAAUiF,EAAOjF,WACtC,IjBbwB,eiBctB,OAAO,EAAP,GAAYiB,EAAZ,CAAmBM,SAAU0D,EAAO1D,WACtC,IjBd8B,qBiBe5B,OAAO,EAAP,GAAYN,EAAZ,CAAmBJ,WAAYoE,EAAOpE,aACxC,IjBf2B,kBiBgBzB,IAAMoB,EAAahB,EAAMM,SAASS,OAAS,EAC3C,OAAO,EAAP,GAAYf,EAAZ,CAAmBM,SAAS,GAAD,mBAAON,EAAMM,UAAb,CAAwB,CACjDqB,QAASqC,EAAOrC,QAChBhB,KAAMX,EAAMjB,SACZgD,IAAK,CAAC/B,EAAMM,SAASU,GAAYe,IAAM,EACvCd,WAAYgD,IAASC,OAAO,2BAEhC,QACE,OAAOlE,ICdOmE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRC,SAASC,IAEZ,OADcC,YAAYV,EAASD,EAAcY,YAAgBC,MAXrE,iFAcS,IAAMC,EAAQJ,IAErBK,IAASC,OACP,kBAAC,IAAD,CAAUF,MAAOA,GACf,kBAAC,EAAD,OAEFG,SAASC,eAAe,SD6GtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.23e1cadf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Spinner.315ddeed.svg\";","module.exports = __webpack_public_path__ + \"static/media/avatar.0a5e7a1f.png\";","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\n\nexport const Login = props => {\n  const [userName, setUserName] = useState(\"\");\n  const { addUserName } = props;\n  return (\n    <div className=\"login-wrap\">\n      <div className=\"login-inner\">\n        <input \n          type=\"text\"\n          className=\"user-name-input message-input\"\n          onChange={e => setUserName(e.target.value)}\n          placeholder=\"Please, enter your name\"\n        />\n        <Link\n          to={userName ? \"/chat\" : \"#\"}\n          className=\"login-btn message-input-btn\"\n          onClick={()=>addUserName(userName)}\n        >\n         Login\n        </Link>\n      </div>\n    </div>\n  );\n}\n\nexport default Login;\n","import * as type from '../actions/actionTypes';\n\nexport const addMessages = messages => ({\n  type: type.ADD_MESSAGES,\n  messages,\n});\n\nexport const toggleIsFetching = isFetching => ({\n  type: type.TOGGLE_IS_FETSHING,\n  isFetching,\n});\n  \nexport const getMessages = () => async dispatch => {\n  try {\n    dispatch(toggleIsFetching(true));\n    const url = 'https://api.dev.buki.com.ua/frontend_test';\n    const response = await fetch(url);\n    const responseBody = await response.json();\n    dispatch(addMessages(responseBody));\n    dispatch(toggleIsFetching(false));\n } catch(e) {console.log(e)}\n};\n\nexport const addNewMessage = message => ({\n  type: type.ADD_NEW_MESSAGE,\n  message,\n});\n\nexport const addUserName = userName => ({\n  type: type.ADD_USER_NAME,\n  userName,\n})","export const ADD_MESSAGES = 'ADD_MESSAGES';\nexport const TOGGLE_IS_FETSHING = 'TOGGLE_IS_FETSHING';\nexport const ADD_NEW_MESSAGE = 'ADD_NEW_MESSAGE';\nexport const ADD_USER_NAME = 'ADD_USER_NAME';","import { connect } from 'react-redux';\nimport Login from '../components/Login/Login';\nimport { addUserName } from '../actions/index';\n\nconst mapStateToProps = state => ({\n});\nconst mapDispatchToProps = {\n    addUserName,\n};\nexport const LoginContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(Login);\n\nexport default LoginContainer;\n","import React from 'react';\n\n// images\nimport Spinner from './images/Spinner.svg';\n\nexport const Preloader = () => (\n  <div className=\"preloader-wrap\">\n    <div className=\"preloader-inner\">\n      <img src={Spinner} alt=\"Spinner\" />\n    </div>\n  </div>\n);\n\nexport default Preloader;\n","import React from 'react';\nimport { getLastMessageTime } from '../../utils/getLastMessageTime';\nimport { getNumberOfUsers } from '../../utils/getNumberOfUsers';\n\nexport const Header = props => {\n  const { messages } = props;\n  return ( \n    <header className=\"header\">\n      <div className=\"content\">\n        <div className=\"header-inner\">\n          <div className=\"header-logo\">\n            My chat\n          </div>\n          <div className=\"header-chat-info\">\n            <div className=\"header-chat-info-number-of\">\n              {getNumberOfUsers(messages)} users &nbsp;\n              {messages.length} messages\n            </div>\n            <div className=\"header-chat-info-last-message\">\n              Last message: {getLastMessageTime(messages)}\n            </div>\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}\n\nexport default Header;","// This function is required to calculate the number of unique users\nexport const getNumberOfUsers = users => {\n  const usersList = new Set();\n    if (users) {\n      users.map(user => usersList.add(user.user))\n      return usersList.size\n    }\n}","//The function is required to get the date and time of the last message\nexport const getLastMessageTime = messages => {\n  const lastMesage = messages.length - 1;\n    if (messages[lastMesage]) {\n      return messages[lastMesage].created_at\n    }\n}","import { connect } from 'react-redux';\nimport Header from '../components/Header/Header';\n\nconst mapStateToProps = state => ({\n  messages: state.messages,\n});\nconst mapDispatchToProps = {};\nexport const HeaderContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(Header);\n\nexport default HeaderContainer;\n\n","import React from 'react';\n\nexport const Message = props => {\n  return (\n    <li className={props.classWrap}>\n      <div className={props.classMessage}>\n        <div className=\"message-time\">\n          {props.createdTime}\n        </div>\n        <div className=\"message-inner\">\n          <div className=\"message-info\">\n            <div className={props.classAvatar}>\n              <img src={props.avatar} alt=\"avatar\" />\n            </div>\n            <div className=\"message-desc\">\n              <h2 className=\"message-title\">{props.name}</h2>\n              <div className=\"message-body\">{props.message}</div>\n            </div>\n          </div>\n          <div className={props.classLikeWrap}>\n            <button className=\"message-like\">&#10084;</button>\n          </div>\n        </div>\n      </div>\n    </li>\n  );\n}\n\nexport default Message;","import React from 'react';\nimport Message from './Message/Message';\n//images\nimport avatar from './Message/images/avatar.png';\n\nexport const ChatList = props => {\n  const { messages } = props;\n  return (\n    <section className=\"chat-list\">\n      <div className=\"content\">\n        {(messages) \n          ? <ul className=\"messages-list\">\n              {messages.map(message => (\n                <Message\n                  classWrap={(message.user === props.userName) \n                    ? \"message-wrap my-message-wrap\" : \"message-wrap\"}\n                  classMessage={(message.user === props.userName) \n                    ? \"message my-message\" : \"message\"}\n                  classLikeWrap={(message.user === props.userName) \n                    ? \"display-none\" : \"message-like-wrap\"}\n                  classAvatar={(message.user === props.userName) \n                    ? \"display-none\" : \"avatar\"}\n                  key={message.id}\n                  avatar={message.avatar \n                    ? message.avatar : avatar}\n                  createdTime={message.created_at}\n                  name={message.user}\n                  message={message.message}\n                />\n            ))}\n            </ul> : null}\n      </div>\n    </section>\n  );\n}\n\nexport default ChatList;","import { connect } from 'react-redux';\nimport ChatList from '../components/ChatList/ChatList';\n\nconst mapStateToProps = state => ({\n  messages: state.messages,\n  newMessage: state.newMessage,\n  userName: state.userName,\n});\nconst mapDispatchToProps = {\n};\nexport const ChatListContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(ChatList);\n\nexport default ChatListContainer;\n","import React, { useState } from 'react';\n\nexport const MessageInput = props => {\n  const [message, setMessage] = useState(\"\");\n  const { addNewMessage } = props;\n  return (\n    <div className=\"message-input-wrap\">\n      <div className=\"message-input-content\">\n        <input \n          className=\"message-input\"\n          type=\"text\" \n          onChange={e => setMessage(e.target.value)}\n          onKeyUp={e => (e.keyCode === 13 && message)\n            ? addNewMessage(message) && setMessage(\"\") : null}\n          value={message} \n          placeholder=\"Type something...\"\n        />\n        <button \n          className=\"message-input-btn\" \n          onClick={()=>(message) \n            ? addNewMessage(message) && setMessage(\"\") : null}\n        >\n          send\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default MessageInput;","import { connect } from 'react-redux';\nimport MessageInput from '../components/MessageInput/MessageInput';\nimport { addNewMessage } from '../actions/index';\n\nconst mapStateToProps = state => ({\n  messages: state.messages,\n});\nconst mapDispatchToProps = {\n  addNewMessage,\n};\nexport const MessageInputContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(MessageInput);\n\nexport default MessageInputContainer;\n","import React from 'react';\n \nexport const Footer = () => {\n  return (\n    <footer className=\"footer\">\n      <div className=\"content\">\n        <div className=\"footer-inner\">\n          <nav className=\"footer-nav\">\n            <a className=\"footer-nav-link\" href=\"#\">Home</a>\n            <a className=\"footer-nav-link\" href=\"#\">About</a>\n            <a className=\"footer-nav-link\" href=\"#\">Contact us</a>\n          </nav>\n          <div className=\"copyright\">@ Copyright 2019</div>\n        </div>\n      </div>\n    </footer>);\n}\n\nexport default Footer;","import React from 'react';\nimport Preloader from '../Preloader/Preloader';\nimport HeaderContainer from '../../containers/HeaderContainer';\nimport ChatListContainer from '../../containers/ChatListContainer';\nimport MessageInputContainer from '../../containers/MessageInputContainer';\nimport Footer from '../Footer/Footer';\n\nexport class Chat extends React.Component {\n  componentDidMount() {\n    this.props.getMessages();\n  }\n  render() {\n    const { isFetching } = this.props;\n    return (\n      <div className=\"chat-wrap\">\n        {isFetching ? <Preloader /> : null}\n        <main className=\"main\">\n          <HeaderContainer />\n          <ChatListContainer />\n          <MessageInputContainer />\n        </main>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default Chat;\n","import { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport Chat from '../components/Chat/Chat';\nimport { \n  getMessages,\n  toggleIsFetching,\n} from '../actions/index';\n\nconst mapStateToProps = state => ({\n  isFetching: state.isFetching,\n  messages: state.messages,\n});\nconst mapDispatchToProps = {\n  getMessages,\n  toggleIsFetching,\n};\nexport const ChatContainer = withRouter(connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(Chat));\n\nexport default ChatContainer;\n","import React from 'react';\nimport { HashRouter as Router, Route } from 'react-router-dom';\nimport LoginContainer from './containers/LoginContainer';\nimport ChatContainer from './containers/ChatContainer';\n\nexport const MainRouter = () => (\n  <Router>\n    <Route path=\"/\" exact component={LoginContainer} />\n    <Route path=\"/chat\" exact component={ChatContainer} />     \n  </Router>  \n);\n\nexport default MainRouter;\n","import React from 'react';\nimport MainRouter from './routes';\nimport './styles/App.scss';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MainRouter />\n    </div>\n  );\n}\n\nexport default App;\n","import * as type from '../actions/actionTypes';\nimport * as moment from 'moment';\n\nexport const initialState = {\n  messages: false,\n  isFetching: false,\n  newMessage: \"\",\n  userName: false,\n};\nexport const reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case type.ADD_USER_NAME:\n      return { ...state, userName: action.userName };\n    case type.ADD_MESSAGES:\n      return { ...state, messages: action.messages };\n    case type.TOGGLE_IS_FETSHING:\n      return { ...state, isFetching: action.isFetching };\n    case type.ADD_NEW_MESSAGE:\n      const lastMesage = state.messages.length - 1;\n      return { ...state, messages: [ ...state.messages,  {\n        message: action.message,\n        user: state.userName,\n        id: +[state.messages[lastMesage].id] + 1,\n        created_at: moment().format(\"YYYY-MM-D HH:mm:ss\"),\n      }]};\n    default:\n      return state;\n  }\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { reducer } from './reducers/reducer';\nimport { initialState } from './reducers/reducer';\nimport * as serviceWorker from './serviceWorker';\n\nexport function configureStore() {\n    const store = createStore(reducer, initialState, applyMiddleware(thunk));\n    return store;\n  }\n  export const store = configureStore();\n  \n  ReactDOM.render(\n    <Provider store={store}>\n      <App />\n    </Provider>,\n    document.getElementById('root'),\n  );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}