{"version":3,"sources":["components/Footer/styles/Footer.module.scss","components/Header/styles/Header.module.scss","components/Login/styles/Login.module.scss","components/MessageInput/styles/MessageInput.module.scss","components/ChatList/Message/styles/Message.module.scss","components/Preloader/styles/Preloader.module.scss","components/Preloader/images/Spinner.svg","components/ChatList/Message/images/avatar.png","components/Login/Login.js","actions/index.js","actions/actionTypes.js","containers/LoginContainer.js","components/Preloader/Preloader.js","components/Header/Header.js","utils/getNumberOfUsers.js","utils/getLastMessageTime.js","containers/HeaderContainer.js","components/ChatList/Message/Message.js","containers/MessageContainer.js","components/ChatList/ChatList.js","containers/ChatListContainer.js","components/MessageInput/MessageInput.js","containers/MessageInputContainer.js","components/Footer/Footer.js","components/Chat/Chat.js","containers/ChatContainer.js","routes.js","App.js","reducers/reducer.js","serviceWorker.js","index.js"],"names":["module","exports","Login","props","useState","userName","setUserName","addUserName","className","s","wrap","inner","type","input","onChange","e","target","value","placeholder","to","btn","onClick","toggleIsFetching","isFetching","mapDispatchToProps","LoginContainer","connect","state","Preloader","src","Spinner","alt","Header","messages","logo","chatInfo","chatInfoNumberOf","users","usersList","Set","map","user","add","size","getNumberOfUsers","length","chatInfoLastMessage","lastMesage","created_at","getLastMessageTime","HeaderContainer","Message","toggleLike","likeMessages","classWrap","classMessage","time","createdTime","info","classAvatar","avatar","desc","title","name","body","message","classLikeWrap","includes","id","messageLike","like","MessageContainer","ChatList","myMessageWrap","myMessage","messageLikeWrap","key","ChatListContainer","newMessage","MessageInput","setMessage","addNewMessage","content","onKeyUp","keyCode","MessageInputContainer","Footer","nav","navLink","href","copyright","Chat","this","getMessages","React","Component","dispatch","a","fetch","response","json","responseBody","console","log","ChatContainer","withRouter","MainRouter","path","exact","component","App","initialState","reducer","action","moment","format","index","indexOf","slice","Boolean","window","location","hostname","match","configureStore","createStore","applyMiddleware","thunk","store","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3be12ea2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"Footer_wrap__2TAji\",\"inner\":\"Footer_inner__l97wy\",\"nav\":\"Footer_nav__YglWe\",\"navLink\":\"Footer_navLink__3hU9B\",\"copyright\":\"Footer_copyright__3ipED\",\"nav-link\":\"Footer_nav-link__2bfI6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inner\":\"Header_inner__2rzD1\",\"wrap\":\"Header_wrap__323Ed\",\"logo\":\"Header_logo__1On6H\",\"chatInfo\":\"Header_chatInfo__1Ai6u\",\"chatInfoNumberOf\":\"Header_chatInfoNumberOf__3EGpr\",\"chatInfoLastMessage\":\"Header_chatInfoLastMessage__1X1R8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"Login_wrap__1maWs\",\"inner\":\"Login_inner__DuZ0e\",\"input\":\"Login_input__3J7qI\",\"btn\":\"Login_btn__lq-HH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"MessageInput_wrap__1sEft\",\"content\":\"MessageInput_content__1WO4E\",\"input\":\"MessageInput_input__2pOzp\",\"btn\":\"MessageInput_btn__17lhZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"Message_wrap__3cCAd\",\"message\":\"Message_message__8rwGc\",\"inner\":\"Message_inner__6_mus\",\"time\":\"Message_time__1b142\",\"info\":\"Message_info__2276t\",\"desc\":\"Message_desc__3csGN\",\"title\":\"Message_title__1oiQ5\",\"body\":\"Message_body__1CEZI\",\"messageLike\":\"Message_messageLike__1F8pn\",\"messageLikeWrap\":\"Message_messageLikeWrap__Iw79J\",\"like\":\"Message_like__2ShJA\",\"myMessage\":\"Message_myMessage__1Ex2g\",\"myMessageWrap\":\"Message_myMessageWrap__sbHAA\",\"avatar\":\"Message_avatar__kxtqF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"Preloader_wrap__1sVqL\",\"inner\":\"Preloader_inner__2VW6Y\"};","module.exports = __webpack_public_path__ + \"static/media/Spinner.315ddeed.svg\";","module.exports = __webpack_public_path__ + \"static/media/avatar.0a5e7a1f.png\";","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\n\n//styles\nimport s from './styles/Login.module.scss';\n\nexport const Login = props => {\n  const [userName, setUserName] = useState(\"\");\n  const { addUserName } = props;\n  return (\n    <div className={s.wrap}>\n      <div className={s.inner}>\n        <input \n          type=\"text\"\n          className={s.input}\n          onChange={e => setUserName(e.target.value)}\n          placeholder=\"Please, enter your name\"\n        />\n        <Link\n          to={userName ? \"/chat\" : \"#\"}\n          className={s.btn}\n          onClick={()=>addUserName(userName)}\n        >\n         Login\n        </Link>\n      </div>\n    </div>\n  );\n}\n\nexport default Login;\n","import * as type from '../actions/actionTypes';\n\nexport const addMessages = messages => ({\n  type: type.ADD_MESSAGES,\n  messages,\n});\n\nexport const toggleIsFetching = isFetching => ({\n  type: type.TOGGLE_IS_FETSHING,\n  isFetching,\n});\n  \nexport const getMessages = () => async dispatch => {\n  try {\n    dispatch(toggleIsFetching(true));\n    const url = 'https://api.dev.buki.com.ua/frontend_test';\n    const response = await fetch(url);\n    const responseBody = await response.json();\n    dispatch(addMessages(responseBody));\n    dispatch(toggleIsFetching(false));\n } catch(e) {console.log(e)}\n};\n\nexport const addNewMessage = message => ({\n  type: type.ADD_NEW_MESSAGE,\n  message,\n});\n\nexport const addUserName = userName => ({\n  type: type.ADD_USER_NAME,\n  userName,\n});\n\nexport const toggleLike = id => ({\n  type: type.TOGGLE_LIKE,\n  id,\n});","export const ADD_MESSAGES = 'ADD_MESSAGES';\nexport const TOGGLE_IS_FETSHING = 'TOGGLE_IS_FETSHING';\nexport const ADD_NEW_MESSAGE = 'ADD_NEW_MESSAGE';\nexport const ADD_USER_NAME = 'ADD_USER_NAME';\nexport const TOGGLE_LIKE = 'TOGGLE_LIKE';","import { connect } from 'react-redux';\nimport Login from '../components/Login/Login';\nimport { addUserName } from '../actions/index';\n\nconst mapStateToProps = state => ({\n});\nconst mapDispatchToProps = {\n    addUserName,\n};\nexport const LoginContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(Login);\n\nexport default LoginContainer;\n","import React from 'react';\n// styles\nimport s from './styles/Preloader.module.scss';\n// images\nimport Spinner from './images/Spinner.svg';\n\nexport const Preloader = () => (\n  <div className={s.wrap}>\n    <div className={s.inner}>\n      <img src={Spinner} alt=\"Spinner\" />\n    </div>\n  </div>\n);\n\nexport default Preloader;\n","import React from 'react';\nimport { getLastMessageTime } from '../../utils/getLastMessageTime';\nimport { getNumberOfUsers } from '../../utils/getNumberOfUsers';\n\n//styles\nimport s from './styles/Header.module.scss';\n\nexport const Header = props => {\n  const { messages } = props;\n  return ( \n    <header className={s.wrap}>\n      <div className=\"content\">\n        <div className={s.inner}>\n          <div className={s.logo}>\n            My chat\n          </div>\n          <div className={s.chatInfo}>\n            <div className={s.chatInfoNumberOf}>\n              {getNumberOfUsers(messages)} users &nbsp;\n              {messages.length} messages\n            </div>\n            <div className={s.chatInfoLastMessage}>\n              Last message: {getLastMessageTime(messages)}\n            </div>\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}\n\nexport default Header;","// This function is required to calculate the number of unique users\nexport const getNumberOfUsers = users => {\n  const usersList = new Set();\n    if (users) {\n      users.map(user => usersList.add(user.user))\n      return usersList.size\n    }\n}","//The function is required to get the date and time of the last message\nexport const getLastMessageTime = messages => {\n  const lastMesage = messages.length - 1;\n    if (messages[lastMesage]) {\n      return messages[lastMesage].created_at\n    }\n}","import { connect } from 'react-redux';\nimport Header from '../components/Header/Header';\n\nconst mapStateToProps = state => ({\n  messages: state.messages,\n});\nconst mapDispatchToProps = {};\nexport const HeaderContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(Header);\n\nexport default HeaderContainer;\n\n","import React from 'react';\n\n//styles\nimport s from './styles/Message.module.scss';\n\nexport const Message = props => {\n  const { toggleLike } = props;\n  const { likeMessages } = props;\n\n  return (\n    <li className={props.classWrap}>\n      <div className={props.classMessage}>\n        <div className={s.time}>\n          {props.createdTime}\n        </div>\n        <div className={s.inner}>\n          <div className={s.info}>\n            <div className={props.classAvatar}>\n              <img src={props.avatar} alt=\"avatar\" />\n            </div>\n            <div className={s.desc}>\n              <h2 className={s.title}>{props.name}</h2>\n              <div className={s.body}>{props.message}</div>\n            </div>\n          </div>\n          <div className={props.classLikeWrap}>\n            <button \n              className={(likeMessages.includes(props.id)) \n                ? `${s.messageLike} ${s.like}` : s.messageLike }\n              onClick={(e)=> toggleLike(e.target.id)}\n              id={props.id}\n            >\n              &#9829;\n            </button>\n          </div>\n        </div>\n      </div>\n    </li>\n  );\n}\n\nexport default Message;","import { connect } from 'react-redux';\nimport Message from '../components/ChatList/Message/Message';\nimport { toggleLike } from '../actions/index';\n\nconst mapStateToProps = state => ({\n  likeMessages: state.likeMessages,\n});\nconst mapDispatchToProps = {\n  toggleLike,\n};\nexport const MessageContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(Message);\n\nexport default MessageContainer;\n","import React from 'react';\nimport MessageContainer from '../../containers/MessageContainer';\n\n//images\nimport avatar from './Message/images/avatar.png';\n\n//styles\nimport s from './Message/styles/Message.module.scss';\n\nexport const ChatList = props => {\n  const { messages } = props;\n  return (\n    <section className=\"chat-list\">\n      <div className=\"content\">\n        {(messages) \n          ? <ul className=\"messages-list\">\n              {messages.map(message => (\n                <MessageContainer\n                  classWrap={(message.user === props.userName) \n                    ? `${s.wrap} ${s.myMessageWrap}` : s.wrap}\n                  classMessage={(message.user === props.userName) \n                    ? `${s.message} ${s.myMessage}` : s.message}\n                  classLikeWrap={(message.user === props.userName) \n                    ? \"display-none\" : s.messageLikeWrap}\n                  classAvatar={(message.user === props.userName) \n                    ? \"display-none\" : s.avatar}\n                  key={message.id}\n                  id={message.id}\n                  avatar={message.avatar \n                    ? message.avatar : avatar}\n                  createdTime={message.created_at}\n                  name={message.user}\n                  message={message.message}\n                />\n            ))}\n            </ul> : null}\n      </div>\n    </section>\n  );\n}\n\nexport default ChatList;","import { connect } from 'react-redux';\nimport ChatList from '../components/ChatList/ChatList';\n\nconst mapStateToProps = state => ({\n  messages: state.messages,\n  newMessage: state.newMessage,\n  userName: state.userName,\n});\nconst mapDispatchToProps = {\n};\nexport const ChatListContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(ChatList);\n\nexport default ChatListContainer;\n","import React, { useState } from 'react';\n\n//styles\nimport s from './styles/MessageInput.module.scss';\n\nexport const MessageInput = props => {\n  const [message, setMessage] = useState(\"\");\n  const { addNewMessage } = props;\n  return (\n    <div className={s.wrap}>\n      <div className={s.content}>\n        <input \n          className={s.input}\n          type=\"text\" \n          onChange={e => setMessage(e.target.value)}\n          onKeyUp={e => (e.keyCode === 13 && message)\n            ? addNewMessage(message) && setMessage(\"\") : null}\n          value={message} \n          placeholder=\"Type something...\"\n        />\n        <button \n          className={s.btn} \n          onClick={()=>(message) \n            ? addNewMessage(message) && setMessage(\"\") : null}\n        >\n          send\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default MessageInput;","import { connect } from 'react-redux';\nimport MessageInput from '../components/MessageInput/MessageInput';\nimport { addNewMessage } from '../actions/index';\n\nconst mapStateToProps = state => ({\n  messages: state.messages,\n});\nconst mapDispatchToProps = {\n  addNewMessage,\n};\nexport const MessageInputContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(MessageInput);\n\nexport default MessageInputContainer;\n","import React from 'react';\nimport s from './styles/Footer.module.scss'\n\nexport const Footer = () => {\n  return (\n    <footer className={s.wrap}>\n      <div className=\"content\">\n        <div className={s.inner}>\n          <nav className={s.nav}>\n            <a className={s.navLink} href=\"#\">Home</a>\n            <a className={s.navLink} href=\"#\">About</a>\n            <a className={s.navLink} href=\"#\">Contact us</a>\n          </nav>\n          <div className={s.copyright}>@ Copyright 2019</div>\n        </div>\n      </div>\n    </footer>);\n}\n\nexport default Footer;","import React from 'react';\nimport Preloader from '../Preloader/Preloader';\nimport HeaderContainer from '../../containers/HeaderContainer';\nimport ChatListContainer from '../../containers/ChatListContainer';\nimport MessageInputContainer from '../../containers/MessageInputContainer';\nimport Footer from '../Footer/Footer';\n\nexport class Chat extends React.Component {\n  componentDidMount() {\n    this.props.getMessages();\n  }\n  render() {\n    const { isFetching } = this.props;\n    return (\n      <div className=\"chat-wrap\">\n        {isFetching ? <Preloader /> : null}\n        <main className=\"main\">\n          <HeaderContainer />\n          <ChatListContainer />\n          <MessageInputContainer />\n        </main>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default Chat;\n","import { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport Chat from '../components/Chat/Chat';\nimport { \n  getMessages,\n  toggleIsFetching,\n} from '../actions/index';\n\nconst mapStateToProps = state => ({\n  isFetching: state.isFetching,\n  messages: state.messages,\n});\nconst mapDispatchToProps = {\n  getMessages,\n  toggleIsFetching,\n};\nexport const ChatContainer = withRouter(connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(Chat));\n\nexport default ChatContainer;\n","import React from 'react';\nimport { HashRouter as Router, Route } from 'react-router-dom';\nimport LoginContainer from './containers/LoginContainer';\nimport ChatContainer from './containers/ChatContainer';\n\nexport const MainRouter = () => (\n  <Router>\n    <Route path=\"/\" exact component={LoginContainer} />\n    <Route path=\"/chat\" exact component={ChatContainer} />     \n  </Router>  \n);\n\nexport default MainRouter;\n","import React from 'react';\nimport MainRouter from './routes';\nimport './styles/App.scss';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MainRouter />\n    </div>\n  );\n}\n\nexport default App;\n","import * as type from '../actions/actionTypes';\nimport * as moment from 'moment';\n\nexport const initialState = {\n  messages: false,\n  isFetching: false,\n  newMessage: \"\",\n  userName: false,\n  likeMessages: [],\n};\nexport const reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case type.ADD_USER_NAME:\n      return { ...state, userName: action.userName };\n    case type.ADD_MESSAGES:\n      return { ...state, messages: action.messages };\n    case type.TOGGLE_IS_FETSHING:\n      return { ...state, isFetching: action.isFetching };\n    case type.ADD_NEW_MESSAGE:\n      const lastMesage = state.messages.length - 1;\n      return { ...state, messages: [ ...state.messages,  {\n        message: action.message,\n        user: state.userName,\n        id: +[state.messages[lastMesage].id] + 1,\n        created_at: moment().format(\"YYYY-MM-D HH:mm:ss\"),\n      }]};\n    case type.TOGGLE_LIKE:\n      if(state.likeMessages.includes(action.id)) {\n        const index = state.likeMessages.indexOf(action.id);\n        return { ...state, likeMessages: \n          [ ...state.likeMessages.slice(0, index), \n            ...state.likeMessages.slice(index + 1)]}\n      } \n      return { ...state, likeMessages: [...state.likeMessages, action.id] };\n      default:\n      return state;\n  }\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { reducer } from './reducers/reducer';\nimport { initialState } from './reducers/reducer';\nimport * as serviceWorker from './serviceWorker';\n\nexport function configureStore() {\n    const store = createStore(reducer, initialState, applyMiddleware(thunk));\n    return store;\n  }\n  export const store = configureStore();\n  \n  ReactDOM.render(\n    <Provider store={store}>\n      <App />\n    </Provider>,\n    document.getElementById('root'),\n  );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}