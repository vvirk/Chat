{"version":3,"sources":["components/Footer/styles/Footer.module.scss","components/Header/styles/Header.module.scss","components/Login/styles/Login.module.scss","components/MessageInput/styles/MessageInput.module.scss","components/Message/styles/Message.module.scss","components/Preloader/styles/Preloader.module.scss","components/Preloader/images/Spinner.svg","components/Message/images/avatar.png","components/Login/Login.js","actions/index.js","actions/actionTypes.js","containers/LoginContainer.js","components/Preloader/Preloader.js","components/Header/Header.js","utils/getNumberOfUsers.js","utils/getLastMessageTime.js","containers/HeaderContainer.js","components/Message/Message.js","containers/MessageContainer.js","components/ChatList/ChatList.js","containers/ChatListContainer.js","components/MessageInput/MessageInput.js","containers/MessageInputContainer.js","components/Footer/Footer.js","components/Chat/Chat.js","containers/ChatContainer.js","routes.js","App.js","reducers/reducer.js","serviceWorker.js","index.js"],"names":["module","exports","Login","props","addUserName","userName","useRef","className","s","wrap","inner","render","history","type","input","onKeyUp","e","keyCode","current","value","push","placeholder","ref","to","btn","onClick","toggleIsFetching","isFetching","mapDispatchToProps","LoginContainer","withRouter","connect","state","Preloader","src","Spinner","alt","Header","messages","logo","chatInfo","chatInfoNumberOf","users","usersList","Set","map","user","add","size","getNumberOfUsers","length","chatInfoLastMessage","lastMesage","created_at","getLastMessageTime","HeaderContainer","Message","toggleLike","likeMessages","deleteMessage","changeMessage","classWrap","classMessage","createdTime","classAvatar","avatar","name","message","classLikeWrap","id","classNav","time","info","desc","title","body","includes","messageLike","like","target","editBtn","deleteBtn","MessageContainer","ChatList","messagesEndRef","useEffect","scrollIntoView","behavior","myMessageWrap","myMessage","messageLikeWrap","nav","key","ChatListContainer","newMessage","MessageInput","addMessage","sendMessage","editId","saveEditedMessage","editIndex","content","onChange","index","MessageInputContainer","f","Footer","navLink","href","copyright","Chat","this","getMessages","React","Component","dispatch","a","fetch","response","json","responseBody","console","log","ChatContainer","MainRouter","path","exact","component","App","initialState","reducer","action","moment","format","i","editValue","messagesCopy","filter","indexOf","slice","Boolean","window","location","hostname","match","configureStore","createStore","applyMiddleware","thunk","store","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.74b6b698.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"Footer_wrap__2TAji\",\"inner\":\"Footer_inner__l97wy\",\"nav\":\"Footer_nav__YglWe\",\"navLink\":\"Footer_navLink__3hU9B\",\"copyright\":\"Footer_copyright__3ipED\",\"nav-link\":\"Footer_nav-link__2bfI6\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"inner\":\"Header_inner__2rzD1\",\"wrap\":\"Header_wrap__323Ed\",\"logo\":\"Header_logo__1On6H\",\"chatInfo\":\"Header_chatInfo__1Ai6u\",\"chatInfoNumberOf\":\"Header_chatInfoNumberOf__3EGpr\",\"chatInfoLastMessage\":\"Header_chatInfoLastMessage__1X1R8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"Login_wrap__1maWs\",\"inner\":\"Login_inner__DuZ0e\",\"input\":\"Login_input__3J7qI\",\"btn\":\"Login_btn__lq-HH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"MessageInput_wrap__1sEft\",\"content\":\"MessageInput_content__1WO4E\",\"input\":\"MessageInput_input__2pOzp\",\"btn\":\"MessageInput_btn__17lhZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"Message_wrap__30hQ9\",\"message\":\"Message_message__15SQI\",\"inner\":\"Message_inner__hNt1P\",\"time\":\"Message_time__kqhND\",\"info\":\"Message_info__3pIMW\",\"desc\":\"Message_desc__1kzFn\",\"title\":\"Message_title__2j9Rl\",\"body\":\"Message_body__3bZ-o\",\"messageLike\":\"Message_messageLike__tNwUk\",\"messageLikeWrap\":\"Message_messageLikeWrap__8qDgP\",\"like\":\"Message_like__1GnSH\",\"myMessage\":\"Message_myMessage__30dcG\",\"myMessageWrap\":\"Message_myMessageWrap__6Bdh9\",\"avatar\":\"Message_avatar__3lrhu\",\"nav\":\"Message_nav__1aPR2\",\"deleteBtn\":\"Message_deleteBtn__1i0Di\",\"editBtn\":\"Message_editBtn__39mWs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrap\":\"Preloader_wrap__1sVqL\",\"inner\":\"Preloader_inner__2VW6Y\"};","module.exports = __webpack_public_path__ + \"static/media/Spinner.315ddeed.svg\";","module.exports = __webpack_public_path__ + \"static/media/avatar.0a5e7a1f.png\";","import React, { useRef } from 'react';\nimport { \n  Route,\n  Link, \n} from 'react-router-dom';\n\n//styles\nimport s from './styles/Login.module.scss';\n\nexport const Login = props => {\n  const { addUserName } = props;\n  const userName = useRef();\n  return (\n    <div className={s.wrap}>\n      <div className={s.inner}>\n        <Route \n          render={({ history}) => (\n            <input \n              type=\"text\"\n              className={s.input}\n              onKeyUp={e => (e.keyCode === 13) \n                ? addUserName(userName.current.value) && history.push(\"/\"): null}\n              placeholder=\"Please, enter your name\"\n              ref={userName}\n            />\n          )}\n        />\n        <Link\n          to={\"/\"}\n          className={s.btn}\n          onClick={()=>addUserName(userName.current.value)}\n        >\n         Login\n        </Link>\n      </div>\n    </div>\n  );\n}\n\nexport default Login;\n","import * as type from '../actions/actionTypes';\n\nexport const addMessages = messages => ({\n  type: type.ADD_MESSAGES,\n  messages,\n});\n\nexport const addMessage = message => ({\n  type: type.ADD_MESSAGE,\n  message,\n});\n\nexport const toggleIsFetching = isFetching => ({\n  type: type.TOGGLE_IS_FETSHING,\n  isFetching,\n});\n  \nexport const getMessages = () => async dispatch => {\n  try {\n    dispatch(toggleIsFetching(true));\n    const url = 'https://api.dev.buki.com.ua/frontend_test';\n    const response = await fetch(url);\n    const responseBody = await response.json();\n    dispatch(addMessages(responseBody));\n    dispatch(toggleIsFetching(false));\n } catch(e) {console.log(e)}\n};\n\nexport const sendMessage = message => ({\n  type: type.SEND_MESSAGE,\n  message,\n});\n\nexport const addUserName = userName => ({\n  type: type.ADD_USER_NAME,\n  userName,\n});\n\nexport const toggleLike = id => ({\n  type: type.TOGGLE_LIKE,\n  id,\n});\n\nexport const deleteMessage = id => ({\n  type: type.DELETE_MESSAGE,\n  id,\n});\n\nexport const addEditId = id => ({\n  type: type.ADD_EDIT_ID,\n  id,\n});\n\nexport const changeMessage = id => ({\n  type: type.CHANGE_MESSAGE,\n  id,\n});\n\nexport const saveEditedMessage = (message, index) => ({\n  type: type.SAVE_EDITED_MESSAGE,\n  message, \n  index,\n});","export const ADD_MESSAGES = 'ADD_MESSAGES';\nexport const ADD_MESSAGE = 'ADD_MESSAGE';\nexport const TOGGLE_IS_FETSHING = 'TOGGLE_IS_FETSHING';\nexport const SEND_MESSAGE = 'SEND_MESSAGE';\nexport const ADD_USER_NAME = 'ADD_USER_NAME';\nexport const TOGGLE_LIKE = 'TOGGLE_LIKE';\nexport const DELETE_MESSAGE = 'DELETE_MESSAGE';\nexport const CHANGE_MESSAGE = 'CHANGE_MESSAGE';\nexport const SAVE_EDITED_MESSAGE = 'SAVE_EDITED_MESSAGE';\nexport const ADD_EDIT_ID = 'ADD_EDIT_ID';","import { connect } from 'react-redux';\nimport Login from '../components/Login/Login';\nimport { addUserName } from '../actions/index';\nimport { withRouter } from 'react-router-dom'\n\nconst mapStateToProps = state => ({});\n\nconst mapDispatchToProps = {\n    addUserName,\n};\nexport const LoginContainer = withRouter(connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(Login));\n\nexport default LoginContainer;\n","import React from 'react';\n\n// styles\nimport s from './styles/Preloader.module.scss';\n\n// images\nimport Spinner from './images/Spinner.svg';\n\nexport const Preloader = () => (\n  <div className={s.wrap}>\n    <div className={s.inner}>\n      <img src={Spinner} alt=\"Spinner\" />\n    </div>\n  </div>\n);\n\nexport default Preloader;\n","import React from 'react';\nimport { getLastMessageTime } from '../../utils/getLastMessageTime';\nimport { getNumberOfUsers } from '../../utils/getNumberOfUsers';\n\n//styles\nimport s from './styles/Header.module.scss';\n\nexport const Header = ({ messages }) => ( \n  <header className={s.wrap}>\n    <div className=\"content\">\n      <div className={s.inner}>\n        <div className={s.logo}>\n          My chat\n        </div>\n        <div className={s.chatInfo}>\n          <div className={s.chatInfoNumberOf}>\n            {getNumberOfUsers(messages)} users &nbsp;\n            {messages.length} messages\n          </div>\n          <div className={s.chatInfoLastMessage}>\n            Last message: {getLastMessageTime(messages)}\n          </div>\n        </div>\n      </div>\n    </div>\n  </header>\n);\n\nexport default Header;","// This function is required to calculate the number of unique users\nexport const getNumberOfUsers = users => {\n  const usersList = new Set();\n    if (users) {\n      users.map(user => usersList.add(user.user))\n      return usersList.size\n    }\n}","//The function is required to get the date and time of the last message\nexport const getLastMessageTime = messages => {\n  const lastMesage = messages.length - 1;\n    if (messages[lastMesage]) {\n      return messages[lastMesage].created_at\n    }\n}","import { connect } from 'react-redux';\nimport Header from '../components/Header/Header';\n\nconst mapStateToProps = state => ({\n  messages: state.messages,\n});\nconst mapDispatchToProps = {};\nexport const HeaderContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(Header);\n\nexport default HeaderContainer;\n\n","import React from 'react';\n\n//styles\nimport s from './styles/Message.module.scss';\n\nexport const Message = ({ \n  toggleLike, \n  likeMessages, \n  deleteMessage,\n  changeMessage,\n  classWrap,\n  classMessage,\n  createdTime,\n  classAvatar,\n  avatar,\n  name,\n  message,\n  classLikeWrap,\n  id,\n  classNav,\n}) => (\n  <li className={classWrap}>\n    <div className={classMessage}>\n      <div className={s.time}>\n        {createdTime}\n      </div>\n      <div className={s.inner}>\n        <div className={s.info}>\n          <div className={classAvatar}>\n            <img src={avatar} alt=\"avatar\" />\n          </div>\n          <div className={s.desc}>\n            <h2 className={s.title}>{name}</h2>\n            <div className={s.body}>{message}</div>\n          </div>\n        </div>\n        <div className={classLikeWrap}>\n          <div \n            className={(likeMessages.includes(id)) \n              ? `${s.messageLike} ${s.like}` : s.messageLike }\n            onClick={(e)=> toggleLike(e.target.id)}\n            id={id}\n          >\n            &#9829;\n          </div>\n        </div>\n        <nav className={classNav}>\n          <div \n           className={s.editBtn}\n           id={id}\n           title=\"edit message\"\n           onClick={(e)=> changeMessage(e.target.id)}\n          >\n            edit\n          </div>\n          <div \n            id={id}\n            onClick={(e)=>deleteMessage(e.target.id)}\n            className={s.deleteBtn}\n            title=\"delete message\"\n          >\n            &#10799;\n          </div>\n        </nav>\n      </div>\n    </div>\n  </li>\n);\n\nexport default Message;","import { connect } from 'react-redux';\nimport Message from '../components//Message/Message';\nimport { \n  toggleLike,\n  deleteMessage,\n  changeMessage,\n} from '../actions/index';\n\nconst mapStateToProps = state => ({\n  likeMessages: state.likeMessages,\n});\nconst mapDispatchToProps = {\n  toggleLike,\n  deleteMessage,\n  changeMessage,\n};\nexport const MessageContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(Message);\n\nexport default MessageContainer;\n","import React, { useEffect, useRef } from 'react';\nimport MessageContainer from '../../containers/MessageContainer';\n\n//images\nimport avatar from '../Message/images/avatar.png';\n\n//styles\nimport s from '../Message/styles/Message.module.scss';\n\nexport const ChatList = props => {\n  const { messages } = props;\n  const messagesEndRef = useRef(null);\n  const scrollToBottom = () => {\n    messagesEndRef.current.scrollIntoView({ behavior: \"smooth\" });\n  };\n  useEffect(scrollToBottom, [messages]);\n  return (\n    <section className=\"chatList\">\n      <div className=\"content\">\n        {(messages) \n          ? <ul className=\"messages-list\">\n              {messages.map(message => (\n                <MessageContainer\n                  classWrap={(message.user === props.userName) \n                    ? `${s.wrap} ${s.myMessageWrap}` : s.wrap}\n                  classMessage={(message.user === props.userName) \n                    ? `${s.message} ${s.myMessage}` : s.message}\n                  classLikeWrap={(message.user === props.userName) \n                    ? \"display-none\" : s.messageLikeWrap}\n                  classAvatar={(message.user === props.userName) \n                    ? \"display-none\" : s.avatar}\n                  classNav={(message.user === props.userName) \n                    ? s.nav : \"display-none\"}\n                  key={message.id}\n                  id={message.id}\n                  avatar={message.avatar \n                    ? message.avatar : avatar}\n                  createdTime={message.created_at}\n                  name={message.user}\n                  message={message.message}\n                />\n            ))}\n            </ul> : null}\n            <div ref={messagesEndRef} />\n      </div>\n    </section>\n  );\n}\n\nexport default ChatList;","import { connect } from 'react-redux';\nimport ChatList from '../components/ChatList/ChatList';\n\nconst mapStateToProps = state => ({\n  messages: state.messages,\n  newMessage: state.newMessage,\n  userName: state.userName,\n});\nconst mapDispatchToProps = {\n};\nexport const ChatListContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(ChatList);\n\nexport default ChatListContainer;\n","import React from 'react';\n\n//styles\nimport s from './styles/MessageInput.module.scss';\n\nexport const MessageInput = ({ \n  addMessage,\n  message,\n  sendMessage,\n  editId,\n  saveEditedMessage,\n  editIndex,\n}) => {\n  const handleKeyUp = e => (\n    (e.keyCode === 13 && editId && message) \n      ? saveEditedMessage(message, editIndex) \n      : (e.keyCode === 13 && message) ? sendMessage(message): null\n  );\n\n  const handleClick = () => (\n    (message && editId) \n      ? saveEditedMessage(message, editIndex)\n      : (message) ? sendMessage(message) : null\n  )\n  return (\n    <div className={s.wrap}>\n      <div className={s.content}>\n        <input \n          className={s.input}\n          type=\"text\" \n          onChange={e => addMessage(e.target.value)}\n          onKeyUp={handleKeyUp}\n          value={message} \n          placeholder=\"Type something...\"\n        />\n        <button \n          className={s.btn} \n          onClick={handleClick}\n        >\n          send\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default MessageInput;","import { connect } from 'react-redux';\nimport MessageInput from '../components/MessageInput/MessageInput';\nimport { \n  addMessage,\n  sendMessage,\n  saveEditedMessage,\n} from '../actions/index';\n\nconst mapStateToProps = state => ({\n  message: state.message,\n  editId: state.editId,\n  editIndex: state.editIndex,\n  f: state.f,\n});\nconst mapDispatchToProps = {\n  addMessage,\n  sendMessage,\n  saveEditedMessage,\n};\nexport const MessageInputContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(MessageInput);\n\nexport default MessageInputContainer;\n","import React from 'react';\n\n//styles\nimport s from './styles/Footer.module.scss'\n\nexport const Footer = () => (\n  <footer className={s.wrap}>\n    <div className=\"content\">\n      <div className={s.inner}>\n        <nav className={s.nav}>\n          <a className={s.navLink} href=\"#\">Home</a>\n          <a className={s.navLink} href=\"#\">About</a>\n          <a className={s.navLink} href=\"#\">Contact us</a>\n        </nav>\n        <div className={s.copyright}>@ Copyright 2019</div>\n      </div>\n    </div>\n  </footer>\n);\n\nexport default Footer;","import React from 'react';\nimport Preloader from '../Preloader/Preloader';\nimport { Redirect } from 'react-router-dom';\nimport HeaderContainer from '../../containers/HeaderContainer';\nimport ChatListContainer from '../../containers/ChatListContainer';\nimport MessageInputContainer from '../../containers/MessageInputContainer';\nimport Footer from '../Footer/Footer';\n\nexport class Chat extends React.Component {\n  componentDidMount() {\n    this.props.getMessages();\n  }\n  render() {\n    const { isFetching } = this.props;\n    const { userName } = this.props;\n    return (\n      <div className=\"chat-wrap\">\n        {isFetching ? <Preloader /> : null}\n        {!userName ? <Redirect to={\"/login\"} /> : null}\n        <main className=\"main\">\n          <HeaderContainer />\n          <ChatListContainer />\n          <MessageInputContainer />\n        </main>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default Chat;\n","import { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport Chat from '../components/Chat/Chat';\nimport { \n  getMessages,\n  toggleIsFetching,\n} from '../actions/index';\n\nconst mapStateToProps = state => ({\n  isFetching: state.isFetching,\n  messages: state.messages,\n  userName: state.userName,\n});\nconst mapDispatchToProps = {\n  getMessages,\n  toggleIsFetching,\n};\nexport const ChatContainer = withRouter(connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(Chat));\n\nexport default ChatContainer;\n","import React from 'react';\nimport { HashRouter as Router, Route } from 'react-router-dom';\nimport LoginContainer from './containers/LoginContainer';\nimport ChatContainer from './containers/ChatContainer';\n\nexport const MainRouter = () => (\n  <Router>\n    <Route path=\"/\" exact component={ChatContainer} />     \n    <Route path=\"/login\" exact component={LoginContainer} />\n  </Router>  \n);\n\nexport default MainRouter;\n","import React from 'react';\nimport MainRouter from './routes';\nimport './styles/App.scss';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MainRouter />\n    </div>\n  );\n}\n\nexport default App;\n","import * as type from '../actions/actionTypes';\nimport * as moment from 'moment';\n\nexport const initialState = {\n  userName: false,\n  messages: false,\n  message: \"\",\n  isFetching: false,\n  newMessage: \"\",\n  likeMessages: [],\n  editId: false,\n  editIndex: false,\n};\nexport const reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case type.ADD_USER_NAME:\n      return { ...state, userName: action.userName };\n    case type.TOGGLE_IS_FETSHING:\n      return { ...state, isFetching: action.isFetching };\n    case type.ADD_MESSAGES:\n      return { ...state, messages: action.messages };\n    case type.ADD_MESSAGE:\n      return { ...state, message: action.message };\n    case type.SEND_MESSAGE:\n      const lastMesage = state.messages.length - 1;\n      return { \n        ...state, \n          messages: [ ...state.messages,  {\n            id: +[state.messages[lastMesage].id] + 1,\n            user: state.userName,\n            created_at: moment().format(\"YYYY-MM-D HH:mm:ss\"),\n            message: action.message,\n          }], \n          message: \"\"\n        };\n    case type.CHANGE_MESSAGE:\n        let index;\n        for (let i = 0; i < state.messages.length; i++) {\n          if (+action.id === +state.messages[i].id) {\n            index = i;\n          }\n        }\n        const editValue = (state.messages[index]) \n          ? state.messages[index].message : \"\";\n      return { \n        ...state, \n          editId: action.id, \n          message: editValue, \n          editIndex: index, \n        };\n    case type.SAVE_EDITED_MESSAGE:\n      const messagesCopy = [...state.messages];\n      messagesCopy[action.index].message = action.message;\n      return { \n        ...state, \n          messages: messagesCopy, \n          message: \"\",\n          editId: false, \n          editIndex: false,\n        };\n    case type.DELETE_MESSAGE:  \n      return {  ...state, messages: \n        [ ...state.messages.filter(message => +message.id !== +action.id)]\n      };\n    case type.TOGGLE_LIKE:\n      if(state.likeMessages.includes(action.id)) {\n        const index = state.likeMessages.indexOf(action.id);\n        return { ...state, likeMessages: \n          [ ...state.likeMessages.slice(0, index), \n            ...state.likeMessages.slice(index + 1)]}\n      } \n      return { ...state, likeMessages: [...state.likeMessages, action.id] };\n      default:\n      return state;\n  }\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { reducer } from './reducers/reducer';\nimport { initialState } from './reducers/reducer';\nimport * as serviceWorker from './serviceWorker';\n\nexport function configureStore() {\n    const store = createStore(reducer, initialState, applyMiddleware(thunk));\n    return store;\n  }\n  export const store = configureStore();\n  \n  ReactDOM.render(\n    <Provider store={store}>\n      <App />\n    </Provider>,\n    document.getElementById('root'),\n  );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}