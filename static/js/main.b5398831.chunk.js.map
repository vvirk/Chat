{"version":3,"sources":["components/Preloader/images/Spinner.svg","components/ChatList/Message/images/avatar.png","components/Login/Login.js","actions/index.js","actions/actionTypes.js","containers/LoginContainer.js","components/Preloader/Preloader.js","components/Header/Header.js","utils/getNumberOfUsers.js","utils/getLastMessageTime.js","containers/HeaderContainer.js","components/ChatList/Message/Message.js","components/ChatList/ChatList.js","containers/ChatListContainer.js","components/MessageInput/MessageInput.js","containers/MessageInputContainer.js","components/Footer/Footer.js","components/Chat/Chat.js","containers/ChatContainer.js","routes.js","App.js","reducers/reducer.js","serviceWorker.js","index.js"],"names":["module","exports","Login","props","useState","userName","setUserName","console","log","className","type","onChange","e","target","value","placeholder","to","onClick","addUserName","toggleIsFetching","isFetching","mapDispatchToProps","LoginContainer","connect","state","Preloader","src","Spinner","alt","Header","users","usersList","Set","map","user","add","size","getNumberOfUsers","messages","length","lastMesage","created_at","getLastMessageTime","HeaderContainer","Message","classWrap","classMessage","createdTime","avatar","name","message","classLikeWrap","ChatList","key","id","newMessage","ChatListContainer","MessageInput","setMessage","addNewMessage","MessageInputContainer","Footer","href","Chat","this","getMessages","React","Component","dispatch","a","fetch","response","json","responseBody","ChatContainer","withRouter","MainRouter","path","exact","component","App","initialState","reducer","action","moment","format","Boolean","window","location","hostname","match","configureStore","createStore","applyMiddleware","thunk","store","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b5398831.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Spinner.315ddeed.svg\";","module.exports = __webpack_public_path__ + \"static/media/avatar.0a5e7a1f.png\";","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\n\nexport const Login = (props) => {\n  const [userName, setUserName] = useState(\"\");\n  console.log(userName);\n  return (\n    <div className=\"login-wrap\">\n      <div className=\"login-inner\">\n        <input \n          type=\"text\"\n          className=\"user-name-input message-input\"\n          onChange={(e) => setUserName(e.target.value)}\n          placeholder=\"Please, enter your name\"\n        />\n        <Link\n          to={userName ? \"/chat\" : \"#\"}\n          className=\"login-btn message-input-btn\"\n          onClick={()=>props.addUserName(userName)}\n        >\n         Login\n        </Link>\n      </div>\n    </div>\n  );\n}\n\nexport default Login;\n","import * as type from '../actions/actionTypes';\n\nexport const addMessages = messages => ({\n  type: type.ADD_MESSAGES,\n  messages,\n});\n\nexport const toggleIsFetching = isFetching => ({\n  type: type.TOGGLE_IS_FETSHING,\n  isFetching,\n});\n  \nexport const getMessages = () => async (dispatch) => {\n  try {\n    const url = 'https://api.dev.buki.com.ua/frontend_test';\n    const response = await fetch(url);\n    const responseBody = await response.json();\n    dispatch(addMessages(responseBody));\n    dispatch(toggleIsFetching(false));\n } catch(e) {console.log(e)}\n};\n\nexport const addNewMessage = message => ({\n  type: type.ADD_NEW_MESSAGE,\n  message,\n});\n\nexport const addUserName = userName => ({\n  type: type.ADD_USER_NAME,\n  userName,\n})","export const ADD_MESSAGES = 'ADD_MESSAGES';\nexport const TOGGLE_IS_FETSHING = 'TOGGLE_IS_FETSHING';\nexport const ADD_NEW_MESSAGE = 'ADD_NEW_MESSAGE';\nexport const ADD_USER_NAME = 'ADD_USER_NAME';","import { connect } from 'react-redux';\nimport Login from '../components/Login/Login';\nimport { addUserName } from '../actions/index';\n\nconst mapStateToProps = state => ({\n});\nconst mapDispatchToProps = {\n    addUserName,\n};\nexport const LoginContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(Login);\n\nexport default LoginContainer;\n","import React from 'react';\n\n// images\nimport Spinner from './images/Spinner.svg';\n\nexport const Preloader = () => (\n  <div className=\"preloader-wrap\">\n    <div className=\"preloader-inner\">\n      <img src={Spinner} alt=\"Spinner\" />\n    </div>\n  </div>\n);\n\nexport default Preloader;\n","import React from 'react';\nimport { getLastMessageTime } from '../../utils/getLastMessageTime';\nimport { getNumberOfUsers } from '../../utils/getNumberOfUsers';\n\nexport const Header = props => {\n  return( \n    <header className=\"header\">\n      <div className=\"content\">\n        <div className=\"header-inner\">\n          <div className=\"header-logo\">\n            My chat\n          </div>\n          <div className=\"header-chat-info\">\n            <div className=\"header-chat-info-number-of\">\n              {getNumberOfUsers(props.messages)} users &nbsp;\n              {props.messages.length} messages\n            </div>\n            <div className=\"header-chat-info-last-message\">\n              Last message: {getLastMessageTime(props.messages)}\n            </div>\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}\n\nexport default Header;","export const getNumberOfUsers = users => {\n  const usersList = new Set();\n    if (users) {\n      users.map(user => (usersList.add(user.user)))\n      return usersList.size\n    }\n}","export const getLastMessageTime = messages => {\n  const lastMesage = messages.length - 1;\n    if (messages[lastMesage]) {\n      return messages[lastMesage].created_at\n    }\n}","import { connect } from 'react-redux';\nimport Header from '../components/Header/Header';\n\nconst mapStateToProps = state => ({\n  messages: state.messages,\n});\nconst mapDispatchToProps = {};\nexport const HeaderContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(Header);\n\nexport default HeaderContainer;\n\n","import React from 'react';\n\nexport const Message = (props) => {\n  return (\n    <li className={props.classWrap}>\n      <div className={props.classMessage}>\n        <div className=\"message-time\">\n          {props.createdTime}\n        </div>\n        <div className=\"message-inner\">\n          <div className=\"message-info\">\n            <div className=\"avatar\">\n              <img src={props.avatar} alt=\"avatar\" />\n            </div>\n            <div className=\"message-desc\">\n              <h2 className=\"message-title\">{props.name}</h2>\n              <div className=\"message-body\">{props.message}</div>\n            </div>\n          </div>\n          <div className={props.classLikeWrap}>\n            <button className=\"message-like\">&#10084;</button>\n          </div>\n        </div>\n      </div>\n    </li>\n  );\n}\n\nexport default Message;","import React from 'react';\nimport Message from './Message/Message';\n//images\nimport avatar from './Message/images/avatar.png';\n\nexport const ChatList = (props) => {\n  console.log(props.messages.length);\n  const { messages } = props;\n  return (\n    <section className=\"chat-list\">\n      <div className=\"content\">\n        {(messages) \n          ? <ul className=\"messages-list\">\n              {messages.map(message => (\n                <Message\n                  classWrap={(message.user === props.userName) \n                    ? \"message-wrap my-message-wrap\" : \"message-wrap\"}\n                  classMessage={(message.user === props.userName) \n                    ? \"message my-message\" : \"message\"}\n                  classLikeWrap={(message.user === props.userName) \n                    ? \"display-none\" : \"message-like-wrap\"}\n                  key={message.id}\n                  avatar={message.avatar \n                    ? message.avatar : avatar}\n                  createdTime={message.created_at}\n                  name={message.user}\n                  message={message.message}\n                />\n            ))}\n            </ul> : null}\n            <p>{props.newMessage}</p>\n      </div>\n    </section>\n  );\n}\n\nexport default ChatList;","import { connect } from 'react-redux';\nimport ChatList from '../components/ChatList/ChatList';\n\nconst mapStateToProps = state => ({\n  messages: state.messages,\n  newMessage: state.newMessage,\n  userName: state.userName,\n});\nconst mapDispatchToProps = {\n};\nexport const ChatListContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(ChatList);\n\nexport default ChatListContainer;\n","import React, { useState } from 'react';\n\nexport const MessageInput = (props) => {\n  const [message, setMessage] = useState(\"\");\n  return (\n    <div className=\"message-input-wrap\">\n      <div className=\"message-input-content\">\n        <input \n          className=\"message-input\"\n          type=\"text\" \n          onChange={(e) => setMessage(e.target.value)}\n          value={message} \n          placeholder=\"Type something...\"\n        />\n        <button \n          className=\"message-input-btn\" \n          onClick={()=>(message) \n            ? props.addNewMessage(message) && setMessage(\"\") : null}\n        >\n          send\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default MessageInput;","import { connect } from 'react-redux';\nimport MessageInput from '../components/MessageInput/MessageInput';\nimport { addNewMessage } from '../actions/index';\n\nconst mapStateToProps = state => ({\n  messages: state.messages,\n});\nconst mapDispatchToProps = {\n  addNewMessage,\n};\nexport const MessageInputContainer = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(MessageInput);\n\nexport default MessageInputContainer;\n","import React from 'react';\n \nexport const Footer = () => {\n  return (\n    <footer className=\"footer\">\n      <div className=\"content\">\n        <div className=\"footer-inner\">\n          <nav className=\"footer-nav\">\n            <a className=\"footer-nav-link\" href=\"#\">Home</a>\n            <a className=\"footer-nav-link\" href=\"#\">About</a>\n            <a className=\"footer-nav-link\" href=\"#\">Contact us</a>\n          </nav>\n          <div className=\"copyright\">@ Copyright 2019</div>\n        </div>\n      </div>\n    </footer>);\n}\n\nexport default Footer;","import React from 'react';\nimport Preloader from '../Preloader/Preloader';\nimport HeaderContainer from '../../containers/HeaderContainer';\nimport ChatListContainer from '../../containers/ChatListContainer';\nimport MessageInputContainer from '../../containers/MessageInputContainer';\nimport Footer from '../Footer/Footer';\n\nexport class Chat extends React.Component {\n  componentDidMount() {\n    this.props.toggleIsFetching(true);\n    this.props.getMessages();\n  }\n  render() {\n    console.log(this.props);\n    return (\n      <div className=\"chat-wrap\">\n        {(this.props.isFetching) ? <Preloader /> : null}\n        <main className=\"main\">\n          <HeaderContainer />\n          <ChatListContainer />\n          <MessageInputContainer />\n        </main>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default Chat;\n","import { connect } from 'react-redux';\nimport { withRouter } from 'react-router-dom';\nimport Chat from '../components/Chat/Chat';\nimport { \n  getMessages,\n  toggleIsFetching,\n} from '../actions/index';\n\nconst mapStateToProps = state => ({\n  isFetching: state.isFetching,\n  messages: state.messages,\n});\nconst mapDispatchToProps = {\n  getMessages,\n  toggleIsFetching,\n};\nexport const ChatContainer = withRouter(connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(Chat));\n\nexport default ChatContainer;\n","import React from 'react';\nimport { HashRouter as Router, Route } from 'react-router-dom';\nimport LoginContainer from './containers/LoginContainer';\nimport ChatContainer from './containers/ChatContainer';\n\nexport const MainRouter = () => (\n  <Router>\n    <Route path=\"/\" exact component={LoginContainer} />\n    <Route path=\"/chat\" exact component={ChatContainer} />     \n  </Router>  \n);\n\nexport default MainRouter;\n","import React from 'react';\nimport MainRouter from './routes';\nimport './styles/App.scss';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MainRouter />\n    </div>\n  );\n}\n\nexport default App;\n","import * as type from '../actions/actionTypes';\nimport * as moment from 'moment';\n\nexport const initialState = {\n  messages: false,\n  isFetching: false,\n  newMessage: \"\",\n  userName: false,\n};\nexport const reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case type.ADD_USER_NAME:\n      return { ...state, userName: action.userName };\n    case type.ADD_MESSAGES:\n      return { ...state, messages: action.messages };\n    case type.TOGGLE_IS_FETSHING:\n      return { ...state, isFetching: action.isFetching };\n    case type.ADD_NEW_MESSAGE:\n      const lastMesage = state.messages.length - 1;\n      return { ...state, messages: [ ...state.messages,  {\n        message: action.message,\n        user: state.userName,\n        id: +[state.messages[lastMesage].id] + 1,\n        created_at: moment().format(\"YYYY-MM-D HH:mm:ss\"),\n      }]};\n    default:\n      return state;\n  }\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { reducer } from './reducers/reducer';\nimport { initialState } from './reducers/reducer';\nimport * as serviceWorker from './serviceWorker';\n\nexport function configureStore() {\n    const store = createStore(reducer, initialState, applyMiddleware(thunk));\n    return store;\n  }\n  export const store = configureStore();\n  \n  ReactDOM.render(\n    <Provider store={store}>\n      <App />\n    </Provider>,\n    document.getElementById('root'),\n  );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}